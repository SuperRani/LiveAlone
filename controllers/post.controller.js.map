{"version":3,"file":"post.controller.js","sourceRoot":"","sources":["post.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from 'express'\n// DB\n// import { connect } from '../database/database'\n\n\n// Interfaces\nimport { Board } from '../interface/Board'\n\nimport {createPool,Pool} from 'mysql2/promise';\nimport dbName from '../database/mysql'\n\n// import pool from '../database/database'\nimport {connect} from '../database/database'\n\n\n\n// class GamesController{\n//     public async getList (req:Request, res:Response): Promise<void>{\n//         const games = await pool.query('SELECT * FROM games');\n//         res.json(games);\n//     }\n//     public async getOne (req: Request,  res: Response): Promise<any>{\n//         const { id } = req.params;\n//         const game = await pool.query('SELECT * FROM games WHERE id = ?', [id]);\n//         if(game.length > 0){\n//             return res.json(game[0]);\n//         }\n//         res.status(404).json({text: \"the game doesn't exists\"});\n//     }\n//     public async create (req: Request, res: Response): Promise<void>{\n//         await pool.query('INSERT INTO games SET ?', [req.body]);\n//         res.json({message: 'juego Guardado'});\n//     }\n//     public async update (req: Request,  res: Response): Promise<void>{\n//         const { id } = req.params;\n//         await pool.query('UPDATE games SET ? WHERE id = ?', [req.body, id]);\n//         res.json({message: 'juego '+ [id] + ' ha sido actualizado'});\n//     }\n//     public async delete (req: Request, res: Response): Promise<void>{\n//         const { id } = req.params;\n//         await pool.query('DELETE FROM games WHERE id = ?', [id]);\n//         res.json({message: 'juego '+ [id] + ' ha sido eliminado'});\n//     }\n// }\n//\n// const gamesControllers = new GamesController();\n// export default gamesControllers;\n\n\n\n\n\n\n// //get\n// export async function getPosts(req: Request, res: Response): Promise<Response | void> {\n//     const conn = await connect();\n//\n//\n//     try {\n//          const sql = 'CALL usp_get_board;';\n//         // const sql =  `SELECT @RNUM := @RNUM + 1 AS NO, a.* FROM (SELECT * FROM board  ORDER BY bNum ASC ) a, ( SELECT @RNUM := 0 ) b`;\n//\n//         const Board = await conn.query(sql);\n//\n//         // console.log(Board[0]);\n//\n//\n//\n//        await conn.release;\n//         return res.json(Board[0]);\n//\n//\n//     }catch (e) {\n//         console.log(e);\n//\n//     }finally {\n//\n//     }\n//\n//\n//\n//\n// }\n\n\n//get\nexport async function getPosts(req: Request, res: Response): Promise<Response | void> {\n    \n    try {\n        const pool = await createPool(dbName.database);\n        pool.getConnection()\n            .then(connection =>{\n            const Board = connection.query('CALL usp_get_board;');\n            \n            connection.release();\n            console.log('DB IS CONNECTED');\n            return res.json(Board);\n           \n          \n        });\n        \n    }catch (e) {\n        console.log(e);\n        \n    }\n    \n    \n  \n\n\n    // try {\n    //      const sql = 'CALL usp_get_board;';\n    //     // const sql =  `SELECT @RNUM := @RNUM + 1 AS NO, a.* FROM (SELECT * FROM board  ORDER BY bNum ASC ) a, ( SELECT @RNUM := 0 ) b`;\n    //\n    //     const Board = await conn.query(sql);\n    //\n    //     // console.log(Board[0]);\n    //\n    //\n    //     return res.json(Board[0]);\n    //\n    //\n    // }catch (e) {\n    //     console.log(e);\n    //\n    //\n    // }\n\n}\n\n\n\n\n//get\nexport async function getPost(req: Request, res: Response) {\n    // const conn = await connect();\n    // try {\n    //     const bNum = req.params.bNum;\n    //     // const posts = await conn.query(`call usp_get_list_board(?);`);\n    //     const posts = await conn.query('SELECT * FROM board WHERE bNum = ?', [bNum]);\n    //     if(posts.length > 0 ){\n    //         res.json(posts[0]);\n    //     }\n    // }catch (e) {\n    //     console.log(e);\n    // }\n    console.log('update');\n}\n\n//       `SELECT A.*, @RNUM := @RNUM + 1 ROWNUM FROM board A, (SELECT @RNUM := 0) R ORDER BY A.bNum`\n\n//  1.   @rownum := @rownum+1 AS RNUM 은 행을 불러올때마다 1을 더해서 출력하겠다 이다.\n//  2.   SELECT @rownum :=0) AS R 는 @rownum을 0으로 초기화해 SELECT 하겠다 이다.\n\n\n\n//post\nexport async function createPost(req: Request, res: Response) {\n    // const conn = await connect();\n    // try {\n    //     const newBoard: Board = req.body;\n    //\n    //     // await conn.query('INSERT INTO board SET ?', [newBoard]);\n    //     await conn.query('CALL usp_add_board(?);', [newBoard]);\n    //\n    //     res.json({\n    //         message: 'New Post Created'\n    //     });\n    //\n    // }catch (e) {\n    //     console.log(e);\n    // }\n    \n    \n    \n    console.log('update');\n\n}\n\n\n\n//delete\nexport async function deletePost(req: Request, res: Response) {\n    // const conn = await connect();\n    // try {\n    //     const bNum = req.params.bNum;\n    //\n    //\n    //     await conn.query('DELETE FROM board WHERE bNum = ?', [bNum]);\n    //     res.json({\n    //         message: 'Post deleted'\n    //     });\n    //\n    // }catch (e) {\n    //     console.log(e);\n    // }\n    \n    console.log('update');\n}\n\n\n//update\nexport async function updatePost(req: Request, res: Response) {\n    // const conn = await connect();\n    // try {\n    //     const bNum = req.params.bNum;\n    //     const updateBoard: Board = req.body;\n    //\n    //     await conn.query('UPDATE board set ? WHERE bNum = ?', [updateBoard, bNum]);\n    //     res.json({\n    //         message: 'Post Updated'\n    //     });\n    //\n    // }catch (e) {\n    //     console.log(e);\n    // }\n    console.log('update');\n}\n\n\n\n\n\n\n"]}