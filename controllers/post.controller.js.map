{"version":3,"file":"post.controller.js","sourceRoot":"","sources":["post.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from 'express'\n// DB\n// import exportConnection from '../database/database'\n\n// Interfaces\n import { Board } from '../interface/Board'\n// import {Pool} from \"mysql2/promise\";\n// import MyConnectionPool = require(\"../database/database\");\n// import {MysqlImp} from \"../@types/gg/myConnectionPool\";\n//import {mycpInterface} from \"../@types/gg/myConnectionPool\";\n\n\n\n\nimport {MysqlImp} from \"../@types/gg/myConnectionPool\";\n\nclass PostController implements MysqlImp {\n    private pool: any;\n    constructor() {\n        const mysql = require('mysql');\n        this.pool = mysql.createPool({\n            host: 'localhost',\n            user: 'root',\n            password: '0000',\n            database: 'NewTest',\n            connectionLimit: 10\n        });\n    }\n    \n    // export const createPool = (): Promise<any> => {\n    //     return new Promise((resolve, reject) => {\n    //         const mysql = require('mysql');\n    //         let pool = mysql.createPool({\n    //             connectionLimit: 10,\n    //             host: \"localhost\",\n    //             user: \"root\",\n    //             password: \"funple\",\n    //             database: \"Account\"\n    //         });\n    //         resolve(pool);\n    //     });\n    // };\n    \n    public createConnection = (): Promise<any> => {\n        return new Promise((resolve, reject) => {\n            this.pool.getConnection((err, connection) => {\n                if(err)\n                    reject(err);\n                resolve(connection);\n            });\n        });\n    };\n    \n    public query = (connection: any, queryString: string): Promise<any> => {\n        return new Promise((resolve, reject) => {\n            connection.query(queryString, (err, result) => {\n                if(err)\n                    reject(err);\n                resolve(result);\n            });\n        })\n    }\n    public query2 = (connection: any, queryString: string, queryField:string): Promise<any> => {\n        return new Promise((resolve, reject) => {\n            connection.query(queryString,queryField, (err, result) => {\n                if(err)\n                    reject(err);\n                resolve(result);\n            });\n        })\n    }\n\n    \n}\n\nexport = PostController;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    //  class PostController implements MysqlImp{\n    //      // createConnection(): Promise<any> {\n    //      //     throw new Error(\"Method not implemented.\");\n    //      // }\n    //      // query(connection: any, queryString: string): Promise<any> {\n    //      //     throw new Error(\"Method not implemented.\");\n    //      // }\n    //\n    //     private pool: any;\n    //     constructor() {\n    //     const mysql = require('mysql');\n    //     this.pool = mysql.createPool({\n    //         host: 'localhost',\n    //         user: 'root',\n    //         password: '0000',\n    //         database: 'NewTest',\n    //         connectionLimit: 10\n    //     });\n    // }\n    //\n    //      public createConnection = (): Promise<any> => {\n    //          return new Promise((resolve, reject) => {\n    //              this.pool.getConnection((err, connection) => {\n    //                  if(err) {\n    //                      reject(err);\n    //                  }\n    //                  resolve(connection);\n    //              });\n    //          });\n    //      };\n    //\n    //      public query = (connection: any, queryString: string): Promise<any> => {\n    //          return new Promise((resolve, reject) => {\n    //              connection.query(queryString, (err, result) => {\n    //                  if(err)\n    //                      reject(err);\n    //                  resolve(result);\n    //              });\n    //          })\n    //      }\n    //\n    //\n    //\n    //  }\n    //\n    //  export = PostController;\n\n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n        \n         // public async getPosts (req:Request, res:Response): Promise<void>{\n         //     const boards = await exportConnection.pool.query('SELECT * FROM board');\n         //     console.log('board값점 알려줘 ', boards);\n         //     // const boards = await exportConnection.pool.query('call usp_get_board');\n         //     res.json(boards[0]);\n         // }\n         // public async getPost (req: Request,  res: Response): Promise<any>{\n         //     const { bNum } = req.params;\n         //     const board = await exportConnection.pool.query('SELECT * FROM board WHERE bNum = ?', [bNum]);\n         //     if(board.length > 0){\n         //         return res.json(board[0]);\n         //     }\n         //     res.status(404).json({text: \"the board doesn't exists\"});\n         // }\n         // public async createPost (req: Request, res: Response): Promise<void>{\n         //     const newBoard: Board = req.body;\n         //     await exportConnection.pool.query('INSERT INTO board SET ?', [newBoard]);\n         //     res.json({message: 'New Post Created'});\n         // }\n         // public async updatePost (req: Request,  res: Response): Promise<void>{\n         //    const bNum = req.params.bNum;\n         //    const updateBoard: Board = req.body;\n         //    await exportConnection.pool.query('UPDATE board SET ? WHERE bNum = ?', [updateBoard, bNum]);\n         //     res.json({message: 'Post Updated'+ [bNum] + ' ha sido actualizado'});\n         // }\n         // public async deletePost (req: Request, res: Response): Promise<void>{\n         //     const bNum = req.params.bNum;\n         //     await exportConnection.pool.query('DELETE FROM board WHERE bNum = ?', [bNum]);\n         //     res.json({message: 'Post deleted' + [bNum]});\n         // }\n    \n    \n    \n        \n         // //get\n         // async getPosts(req: Request, res: Response): Promise<void> {\n         //\n         //     //const conn = await connect() as Pool;\n         //     return new Promise((resolve, reject) => {\n         //\n         //         // const _mycp = mycp as TEST.mycpInterface;\n         //         return mycp.getConnection().then(connection => {\n         //             // connection.query('CALL usp_get_board;');\n         //             connection.query('select * from board');\n         //             connection.release();\n         //             return;\n         //         }).catch(err => {\n         //             console.log(err);\n         //         });\n         //     }).then(() => {\n         //         return;\n         //     })\n         // }\n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         // //get\n         //\n         //  getPosts(req: Request, res: Response){\n         //     const getBo = mysqlConnectionModule.connect(async (con:any)=> {\n         //\n         //         // const bo = await con.query('CALL_usp_get_board');\n         //\n         //          const bo = await con.query('select * from board');\n         //\n         //         console.log('bo들어있니?' , bo);\n         //         return res.send(bo[0]);\n         //\n         //     });\n         //\n         // }\n        \n         \n         \n  \n         \n         \n         \n         \n        // //get\n        // async getPosts(req: Request, res: Response): Promise<void> {\n        //\n        //     //const conn = await connect() as Pool;\n        //     return new Promise((resolve, reject) => {\n        //\n        //         //const _mycp = mycp as TEST.mycpInterface;\n        //         return mycp.getConnection().then(connection => {\n        //             connection.query('CALL usp_get_board;');\n        //             connection.release();\n        //             return;\n        //         }).catch(err => {\n        //             console.log(err);\n        //         });\n        //     }).then(() => {\n        //         return;\n        //     })\n        // }\n            // try {\n            //\n            //     // const sql =  `SELECT @RNUM := @RNUM + 1 AS NO, a.* FROM (SELECT * FROM board  ORDER BY bNum ASC ) a, ( SELECT @RNUM := 0 ) b`;\n            //\n            //     pool.getConnection((err, connection) => {\n            //\n            //     })\n            //     conn.getConnection().then(connection => {\n            //         let Board = connection.query('CALL usp_get_board;');\n            //         console.log('Board 값'+ Board);\n            //         connection.release();\n            //     })\n            //     //const Board = await conn.query('CALL usp_get_board;');\n            //\n            //     // return res.json(Board[0]);\n            //\n            //\n            // }catch (e) {\n            //\n            //     console.log(e);\n            // }finally {\n            //\n            // }\n        \n        \n      \n        \n        \n        \n        \n        \n        \n        \n        \n\n\n\n\n//         //get\n//         async getPost(req: Request, res: Response) {\n//             // const conn = await connect();\n//             // try {\n//             //     const bNum = req.params.bNum;\n//             //     // const posts = await conn.query(`call usp_get_list_board(?);`);\n//             //     const posts = await conn.query('SELECT * FROM board WHERE bNum = ?', [bNum]);\n//             //     if(posts.length > 0 ){\n//             //         res.json(posts[0]);\n//             //     }\n//             // }catch (e) {\n//             //     console.log(e);\n//             // }\n//             console.log('update');\n//         }\n//\n// //       `SELECT A.*, @RNUM := @RNUM + 1 ROWNUM FROM board A, (SELECT @RNUM := 0) R ORDER BY A.bNum`\n//\n// //  1.   @rownum := @rownum+1 AS RNUM 은 행을 불러올때마다 1을 더해서 출력하겠다 이다.\n// //  2.   SELECT @rownum :=0) AS R 는 @rownum을 0으로 초기화해 SELECT 하겠다 이다.\n//\n//\n//         //post\n//          async createPost(req: Request, res: Response) {\n            // const conn = await connect();\n            // try {\n            //     const newBoard: Board = req.body;\n            //\n            //     // await conn.query('INSERT INTO board SET ?', [newBoard]);\n            //     await conn.query('CALL usp_add_board(?);', [newBoard]);\n            //\n            //     res.json({\n            //         message: 'New Post Created'\n            //     });\n            //\n            // }catch (e) {\n            //     console.log(e);\n            // }\n//\n//             console.log('update');\n//         }\n//\n//\n//\n//         //delete\n//          async deletePost(req: Request, res: Response) {\n//             // const conn = await connect();\n//             // try {\n//             //     const bNum = req.params.bNum;\n//             //\n//             //\n//             //     await conn.query('DELETE FROM board WHERE bNum = ?', [bNum]);\n//             //     res.json({\n//             //         message: 'Post deleted'\n//             //     });\n//             //\n//             // }catch (e) {\n//             //     console.log(e);\n//             // }\n//\n//             console.log('update');\n//         }\n//\n//\n//         //update\n//          async updatePost(req: Request, res: Response) {\n//             // const conn = await connect();\n//             // try {\n//             //     const bNum = req.params.bNum;\n//             //     const updateBoard: Board = req.body;\n//             //\n//             //     await conn.query('UPDATE board set ? WHERE bNum = ?', [updateBoard, bNum]);\n//             //     res.json({\n//             //         message: 'Post Updated'\n//             //     });\n//             //\n//             // }catch (e) {\n//             //     console.log(e);\n//             // }\n//             console.log('update');\n//         }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]}